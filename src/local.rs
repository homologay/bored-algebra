//! Localization

use crate::module::{ModType, RingType};

// imagining localization as a function-like proc macro, something like
//
//        let irreducible_elem: Polynomial<R> = ...;
//        localize!(Polynomial<R>,  Sub<Polynomial<R>, Polynomial<R>>::gen_from(irreducible_elem).complement());

// so, multiplicative subsets need to be working before `localize!` can be made, and multiplicative subsets are
// all tied up with submodules, with ones generated by a single element and prime ideals as examples of particular
// interest.

pub trait MulSet<R: RingType, M: ModType<R>> {
    todo!();
}
